# -*- coding: utf-8 -*-
"""Priyanka - Capstone - CRON job

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t_uOLGzQPB097gaRF0kKTrmDuAeb0JbP
"""

import requests
import numpy as np
import pandas as pd
import psycopg2 as psql
from datetime import datetime
from pprint import pprint
import os
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv('api_key')
user_name = os.getenv('user_name')
user_pass = os.getenv('user_pass')
host_pagila_db = os.getenv('host_pagila_db')

conn = psql.connect(database = 'pagila',
                    user = user_name,
                    host = host_pagila_db,
                    password = user_pass,
                    port = 5432)

url = "https://sky-scanner3.p.rapidapi.com/flights/search-one-way"

querystring = {"fromEntityId":"LOND","toEntityId":"LIS","departDate":"2024-08-21","cabinClass":"economy"}

headers = {
	"x-rapidapi-key": "5ce1c37e6fmsh7f166aac93f6312p10ea76jsnac1c932ae106",
	"x-rapidapi-host": "sky-scanner3.p.rapidapi.com"
}

response = requests.get(url, headers=headers, params=querystring).json()

price = response['data']['itineraries'][0]['price']['raw']
ct = datetime.now()
date_format = "%Y-%m-%d %H:%M:%S"
ct_rounded = datetime.strftime(ct, date_format)

# stays consistent
id = response['data']['itineraries'][0]['id']
departure_aiport_name = response['data']['itineraries'][0]['legs'][0]['origin']['name']
arrival_airport_name = response['data']['itineraries'][0]['legs'][0]['destination']['name']
duration = response['data']['itineraries'][0]['legs'][0]['durationInMinutes']
departure_time = response['data']['itineraries'][0]['legs'][0]['departure']
arrival_time = response['data']['itineraries'][0]['legs'][0]['arrival']
airline_logo = response['data']['itineraries'][0]['legs'][0]['carriers']['marketing'][0]['logoUrl']
airline_name = response['data']['itineraries'][0]['legs'][0]['carriers']['marketing'][0]['name']
fare_policy_isChangeAllowed = response['data']['itineraries'][0]['farePolicy']['isChangeAllowed']
fare_policy_isPartiallyChangeable = response['data']['itineraries'][0]['farePolicy']['isPartiallyChangeable']
fare_policy_isCancellationAllowed = response['data']['itineraries'][0]['farePolicy']['isCancellationAllowed']
fare_policy_isPartiallyRefundable = response['data']['itineraries'][0]['farePolicy']['isPartiallyRefundable']

cur = conn.cursor()
cur.execute("SELECT MAX(row_id) FROM pm_flight_price")
result = cur.fetchone()[0]
if result is None:
  value = 0  # If there are no rows, start with 0
else:
  value = int(result)

flight_price_changes = {'row_id': value + 1,
                        'run_time' : ct_rounded,
                        'price': price}

sql = f"""
    INSERT INTO pm_flight_price(row_id, run_time, price)
    VALUES ({flight_price_changes['row_id']},
            '{flight_price_changes['run_time']}',
             {flight_price_changes['price']})
"""

cur = conn.cursor()
cur.execute(sql)
conn.commit()
conn.close()